{
  "title": "UI-кит",
  "description": "<p>Наш UI Kit и компоненты проекта созданы с использованием мощного фреймворка <span class='font-600'>Tailwind CSS</span>, который обеспечивает быструю и удобную стилизацию интерфейса. Мы расширили его возможности собственными стилями, что позволяет нам легко адаптировать и поддерживать единый дизайн на всех страницах приложения.</p><p>Основные компоненты форм в нашем проекте унаследованы от <span class='font-600'>Angular Material</span>, что обеспечивает высокую степень надежности и качества. Однако, для удовлетворения уникальных потребностей проекта, эти компоненты форм дополнены необходимым функционалом. Такой подход не только обеспечивает стандартизированный и красивый внешний вид, но и гармонично интегрирует дополнительные возможности, специфичные для наших пользовательских требований.</p><p>Использование <span class='font-600'>Tailwind CSS</span> в сочетании с расширенными компонентами форм <span class='font-600'>Angular Material</span> создает мощный и гибкий инструментарий для создания современного и функционального пользовательского интерфейса, гармонично сочетая в себе преимущества обоих подходов.</p>",
  "usageExamples": "Примеры использования",
  "usageExample": "Пример использования",
  "tailwindConfig": "Конфигурация Tailwind",
  "settings": "Основные функции и опции настройки",
  "menu": {
    "overview": "Обзор",
    "typography": "Типографика",
    "icons": "Иконки",
    "colors": "Цвета",
    "inputs": "Инпуты",
    "dropdowns": "Дропдауны",
    "checkboxes": "Чекбоксы",
    "radioButtons": "Радио-баттоны",
    "switchers": "Свичеры",
    "avatars": "Аватарки",
    "dividers": "Разделители"
  },
  "inputsStates": {
    "default": "По умолчанию",
    "noLabel": "Без лейбла",
    "placeholder": "Плейсхолдер",
    "hovered": "При наведении",
    "focused": "При фокусе",
    "filled": "Заполнен",
    "disabledFilled": "Заполнен (отключен)",
    "disabled": "Отключен",
    "described": "С описанием",
    "describedDisabled": "С описанием (отключен)",
    "required": "Обязательное",
    "describedRequired": "С описанием (обязательное)",
    "expander": "Экспандер",
    "roundedExpnader": "Экспандер (скругленный)",
    "resetIcon": "Иконка cброса",
    "rightIcon": "Иконка справа",
    "resetRightIcon": "Иконка справа + сброс",
    "leftIcon": "Иконка слева",
    "resetLeftIcon": "Иконка слева + сброс",
    "allIcons": "Все иконки",
    "fullwidth": "На всю ширину",
    "colorValidated": "Валидация цветом",
    "colorValidatedIcon": "Валидация цветом + иконка",
    "colorInvalidated": "Валидация цветом (ошибка)",
    "colorInvalidatedIcon": "Валидация цветом (ошибка) + иконка",
    "colorValidatedResetIcon": "Валидация цветом + иконка + сброс",
    "colorInvalidatedResetIcon": "Валидация цветом (ошибка) + иконка + сброс",
    "allSettingsEnabledValidated": "Все опции включены",
    "allSettingsEnabledInvalidated": "Все опции включены (ошибка)",
    "multiple": "Множественный",
    "checked": "Выбран",
    "checkedDisabled": "Выбран (отключен)",
    "fieldDescription": "Описание для поля",
    "rounded": "Скругленный",
    "roundedDisabled": "Скругленный (отключен)",
    "accentedGrey": "Акцентированный серый",
    "accented": "Акцентированный серый",
    "bordered": "С границей",
    "labelSmall": "Лейбл S",
    "labelMedium": "Лейбл M",
    "labelLarge": "Лейбл L",
    "presetSmall": "S (малый)",
    "presetMedium": "M (средний)",
    "presetLarge": "L (большой)",
    "verticals": "Вертикальные",
    "horizontals": "Горизонтальные",
    "cssClass": "CSS-класс"
  },
  "pages": {
    "typography": {
      "title": "Типографика",
      "description": "<p><span class='font-600'>TextComponent</span> - универсальный компонент Angular, предназначенный для отображения текста с различными опциями стилизации. Он служит важной частью нашего набора пользовательского интерфейса (UI kit), предоставляя гибкость и настраиваемость для разнообразных дизайнерских потребностей.</p>",
      "tailwindConfig": "Конфигурация Tailwind",
      "settings": "<ul><li><strong>Размер шрифта (<code>font</code>):</strong> Укажите размер шрифта с использованием предопределенных значений перечисления, таких как <code>FontSizesEnum.SM</code>, или предоставьте собственный размер при необходимости.</li><li><strong>Пользовательский размер (<code>size</code>):</strong> При необходимости задайте пользовательский размер шрифта для точной настройки.</li><li><strong>Межстрочный интервал (<code>lineHeight</code>):</strong> Определите пользовательский межстрочный интервал для текста, обеспечивая правильное расстояние между строками и читаемость.</li><li><strong>Насыщенность шрифта (<code>weight</code>):</strong> Выберите насыщенность шрифта с использованием предопределенных значений перечисления (например, <code>FontWeightsEnum.FW_400</code>), влияя на толщину текста.</li><li><strong>Цвет текста (<code>color</code>):</strong> Укажите цвет текста с использованием предопределенного имени класса или собственного значения цвета (например, <code>text_primary</code> или <code>#FF0000</code>).</li></ul><p>Компонент динамически генерирует CSS-классы на основе входных свойств, применяя их к элементу-хосту. Это обеспечивает легкую интеграцию в Angular-приложения и гарантирует согласованный и визуально привлекательный стиль текста во всем проекте.</p><p>Для использования компонента добавьте тег <code>&lt;app-text&gt;</code> в ваш шаблон и предоставьте необходимые входные свойства для настройки. Этот компонент играет важную роль в поддержании цельного и отточенного визуального стиля во всем приложении, способствуя естественному и увлекательному пользовательскому опыту.</p>",
      "headings": "Заголовки",
      "text": "Текст",
      "defaultText": "Быстро съедаем жгучий пельмень."
    },
    "colors": {
      "title": "Цвета",
      "description": "<p>В процессе разработки активно используется фреймворк <span class='font-600'>Tailwind CSS</span>. Наш проект дополняется кастомными цветами в файле tailwind.config.ts в секции themes. Это не только расширяет возможности Tailwind, но и предоставляет уникальную цветовую палитру, специфичную для наших дизайнерских потребностей. Такой подход не только повышает управляемость стилями, но и обеспечивает согласованность цветовой гаммы во всем приложении, где Tailwind CSS является важным инструментом для эффективной разработки интерфейса. В разделе <code>theme</code> определены значения цветов с использованием пользовательских свойств, таких как <code>--background_primary</code>, <code>--text_primary</code>, и т. д., что обеспечивает централизованный способ управления и обновления цветовой палитры.</p>",
      "background": "Фон",
      "text": "Текст",
      "border": "Граница",
      "colors": "Цвета",
      "cssClass": "CSS-класс"
    },
    "icons": {
      "title": "Иконки",
      "description": "<p><span class='font-600'>IconComponent</span> представляет собой многозадачный компонент Angular, разработанный для удобного отображения иконок с возможностью множества настроек. Этот компонент стремится обеспечить гибкость и простоту в интеграции иконок в пользовательский интерфейс проекта.</p>",
      "settings": "<ul><li><strong>Иконка (<code>icon</code>):</strong> Принимает входное значение для указания используемой иконки. Это может быть объект, строка или другой формат в зависимости от требований проекта.</li><li><strong>Размер (<code>size</code>):</strong> Позволяет указать размер иконки с использованием предопределенных значений перечисления (например, <code>IconSizesEnum.Medium</code>). Это обеспечивает консистентность размеров иконок в приложении.</li><li><strong>Цвет (<code>color</code>):</strong> Определяет цвет иконки с использованием предопределенного имени класса или собственного значения цвета. Это дает контроль над цветовой схемой иконок в приложении.</li><li><strong>Дополнительные CSS-классы (<code>cssClass</code>):</strong> Предоставляет возможность добавления пользовательских CSS-классов к иконке для дополнительного стилизации или интеграции с другими компонентами.</li><li><strong>Событие по клику (<code>iconClick</code>):</strong> Вызывается при клике на иконку, что предоставляет возможность реагировать на пользовательские действия.</li></ul><p>Компонент динамически управляет стилями иконки, применяя их к элементу SVG. Он также предоставляет обратный вызов при клике на иконку, что делает его мощным инструментом для создания интерактивных пользовательских интерфейсов.</p><p>Для использования <code>IconComponent</code> добавьте тег <code>&lt;app-icon&gt;</code> в ваш шаблон и предоставьте необходимые входные свойства. Этот компонент позволяет легко интегрировать и стилизовать иконки в приложении, делая его визуально привлекательным и удобным для пользователей.</p>"
    },
    "inputs": {
      "title": "Инпуты",
      "description": "<p><span class='font-600'>InputComponent</span> - это универсальный компонент Angular, предназначенный для управления элементами управления ввода в формах с обширными опциями настройки. Этот компонент расширяет ControlDirective для эффективного управления формой.</p>",
      "settings": "<ul><li><strong>Размер (<code>size</code>):</strong> Укажите размер ввода, используя предопределенные значения перечисления (например, <code>ControlsSizeEnum.MD</code>).</li><li><strong>Отображение метки (<code>showLabel</code>):</strong> Управляйте отображением метки для ввода с помощью свойства <code>showLabel</code>.</li><li><strong>Тип ввода (<code>type</code>):</strong> Определите тип ввода с помощью свойства <code>type</code>.</li><li><strong>Отображение ошибок валидации (<code>showValidationsError</code>):</strong> Выберите, следует ли отображать ошибки валидации с помощью свойства <code>showValidationsError</code>.</li><li><strong>Кнопка сброса (<code>isResetEnabled</code>):</strong> Включите или отключите кнопку сброса с помощью свойства <code>isResetEnabled</code>.</li><li><strong>Иконки валидации (<code>showValidationIcons</code>):</strong> Переключите отображение иконок валидации с помощью свойства <code>showValidationIcons</code>.</li><li><strong>Визуальная валидация (<code>showVisualValidation</code>):</strong> Выберите визуальную валидацию ввода с помощью свойства <code>showVisualValidation</code>.</li><li><strong>Ввод на всю ширину (<code>isFullwidth</code>):</strong> Укажите, должен ли ввод распространяться на всю ширину с помощью свойства <code>isFullwidth</code>.</li><li><strong>Поддержка иконок (<code>leftIcon</code> и <code>rightIcon</code>):</strong> Включите левые и правые иконки с помощью свойств <code>leftIcon</code> и <code>rightIcon</code>.</li><li><strong>Инициализация валидации (<code>initValidation</code>):</strong> Управляйте инициализацией валидации при загрузке компонента с помощью свойства <code>initValidation</code>.</li><li><strong>Маскирование (<code>maskType</code> и <code>mask</code>):</strong> Для числовых вводов выберите тип маски и определите маску с использованием свойств <code>maskType</code> и <code>mask</code>.</li><li><strong>Дополнительное оформление (<code>inputClass</code> и <code>class</code>):</strong> Примените дополнительные CSS-классы к вводу и элементу ввода с помощью свойств <code>class</code> и <code>inputClass</code>.</li></ul><p>Для интеграции компонента в ваш шаблон вставьте тег <code>&lt;app-input&gt;</code> в необходимое место, передайте соответствующие входные свойства для настройки компонента. Например, вы можете указать размер, отображение метки, тип ввода и другие параметры, передав соответствующие значения через атрибуты.</p><p>Этот компонент, расширяя функционал Angular Material, предоставляет обширные опции настройки для управления элементами ввода в формах. Внедрение <app-input> в ваш проект поможет не только в управлении формой, но и в создании согласованного и привлекательного пользовательского интерфейса.</p>"
    },
    "dropdowns": {
      "title": "Дропдауны",
      "description": "<p><span class='font-600'>DropdownComponent</span> - это универсальный компонент Angular, предназначенный для управления выпадающим списком в формах с обширными опциями настройки. Этот компонент также расширяет <span class='font-600'>ControlDirective</span> для эффективного управления формой.</p>",
      "settings": "<ul><li><strong>Multiple (<code>multiple</code>):</strong> Определяет, может ли быть выбрано несколько элементов в списке (по умолчанию <code>false</code>).</li><li><strong>Panel Classes (<code>panelClasses</code>):</strong> Классы, которые могут быть применены к выпадающему списку.</li><li><strong>Preloaded Options (<code>preloadedOptions</code>):</strong> Предзагруженные опции для отображения в выпадающем списке.</li><li><strong>Size (<code>size</code>):</strong> Размер контрола (enum из <code>ControlsSizeEnum</code>).</li><li><strong>Show Label (<code>showLabel</code>):</strong> Показывать ли метку над контролом.</li><li><strong>Type (<code>type</code>):</strong> Тип контрола (enum из <code>InputTypesEnum</code>).</li><li><strong>Show Validation Errors (<code>showValidationsError</code>):</strong> Показывать ли сообщения об ошибке валидации.</li><li><strong>Reset Button (<code>isResetEnabled</code>):</strong> Включено ли сброс значения в контроле.</li><li><strong>Validation Icons (<code>showValidationIcons</code>):</strong> Показывать ли иконки валидации.</li><li><strong>Visual Validation (<code>showVisualValidation</code>):</strong> Показывать ли визуальные эффекты валидации.</li><li><strong>Fullwidth (<code>isFullwidth</code>):</strong> Расширить ли контрол на всю ширину.</li><li><strong>Left Icon (<code>leftIcon</code>):</strong> Иконка слева от контрола (enum из <code>IconsEnum</code>).</li><li><strong>Init Validation (<code>initValidation</code>):</strong> Инициировать ли валидацию сразу после инициализации компонента.</li></ul><p>Для использования компонента вставьте тег <code>&lt;app-dropdown&gt;</code> в ваш шаблон и передайте соответствующие входные свойства для настройки компонента.</p>"
    },
    "checkboxes": {
      "title": "Чекбоксы",
      "description": "<p><span class='font-600'>CheckboxComponent</span> - представляет собой настраиваемый Angular-компонент для обработки чекбоксов в формах.</p>",
      "settings": "<ul><li><strong>Размер чекбокса (<code>size</code>):</strong> Определяет размер чекбокса с использованием предопределенных значений.</li><li><strong>Метка (<code>label</code>):</strong> Текстовая метка чекбокса.</li><li><strong>Описание чекбокса (<code>description</code>):</strong> Дополнительная информация или контекст для лучшего понимания пользователем.</li><li><strong>Состояние отмеченности (<code>checked</code>):</strong> Задает начальное состояние отмеченности чекбокса.</li><li><strong>Закругленные границы (<code>isRounded</code>):</strong> Формирует чекбокс с закругленными углами для выразительного визуального стиля.</li><li><strong>Режим расширения (<code>isExpandMode</code>):</strong> Чекбокс, который при нажатии открывает дополнительный блок контента.</li></ul><p>Для интеграции компонента вставьте тег <code>&lt;app-checkbox&gt;</code> в ваш шаблон и передайте соответствующие входные свойства для настройки компонента.</p>"
    },
    "radioButtons": {
      "title": "Радио-баттоны",
      "description": "<p><span class='font-600'>RadioButtonComponnent</span> компонент Angular, разработанный для работы с переключателями в формах. Используйте предоставленные входные свойства для настройки переключателя в соответствии с вашими требованиями и реагируйте на событие change для эффективной обработки взаимодействия пользователя.</p>",
      "settings": "<ul><li><strong>Размер радио-кнопки (<code>size</code>):</strong> Определяет размер радио-кнопки с использованием предопределенных значений.</li><li><strong>Метка (<code>label</code>):</strong> Текстовая метка, связанная с радио-кнопкой.</li><li><strong>Описание радио-кнопки (<code>description</code>):</strong> Дополнительная информация или контекст для лучшего понимания пользователем.</li><li><strong>Состояние отмеченности (<code>checked</code>):</strong> Задает начальное состояние отмеченности радио-кнопки.</li><li><strong>Контрол формы (<code>control</code>):</strong> Представляет собой формовый контрол для радио-кнопки.</li><li><strong>Обязательное состояние (<code>isRequired</code>):</strong> Указывает, является ли радио-кнопка обязательной для выбора.</li><li><strong>Режим тестирования (<code>isTestMode</code>):</strong> Активирует режим тестирования для радио-кнопки (возможность нажимать на отключенную радио-кнопку).</li></ul><p>Для использования компонента вставьте тег <code>&lt;app-rafio-button&gt;</code> в ваш шаблон и передайте соответствующие входные свойства для настройки компонента.</p>"
    },
    "switchers": {
      "title": "Свичеры",
      "description": "<p><span class='font-600'>SwitcherComponent</span> - это компонент Angular, разработанный для предоставления настраиваемого функционала переключателя в формах.</p>",
      "settings": "<ul><li><strong>Размер переключателя (<code>size</code>):</strong> Определяет размер переключателя с использованием предопределенных значений.</li><li><strong>Метка переключателя (<code>label</code>):</strong> Текстовая метка, связанная с переключателем.</li><li><strong>Описание (<code>description</code>):</strong> Дополнительная информация или контекст для лучшего понимания пользователем.</li><li><strong>Состояние отмеченности (<code>checked</code>):</strong> Задает начальное состояние отмеченности переключателя.</li><li><strong>Контрол формы (<code>control</code>):</strong> Представляет собой формовый контрол для переключателя.</li><li><strong>Режим &quot;Акцент серого&quot; (isAccentGrey):</strong> Указывает, имеет ли переключатель акцент серого цвета.</li></ul><p>Для интеграции компонента вставьте тег <code>&lt;app-switcher&gt;</code> в ваш шаблон и передайте соответствующие входные свойства для настройки компонента.</p>"
    },
    "avatars": {
      "title": "Аватарки",
      "description": "<p><span class='font-600'>AvatarComponent</span> - это компонент Angular, разработанный для отображения аватаров пользователей или изображений в визуально привлекательном и настраиваемом стиле.</p>",
      "settings": "<ul><li><strong>Источник изображения (<code>src</code>):</strong> Указывает исходный URL-адрес изображения аватара. Если изображение не удается загрузить, используется изображение-заглушка по умолчанию ('user-01.svg').</li><li><strong>Размер аватара (<code>size</code>):</strong> Определяет размер аватара с использованием предопределенных значений из AvatarSizesEnum.</li><li><strong>Режим границы (<code>hasBorder</code>):</strong> Указывает, должна ли у аватара быть граница.</li></ul><p>Для интеграции компонента вставьте тег <code>&lt;app-avatar&gt;</code> в ваш шаблон и передайте соответствующие входные свойства для настройки компонента.</p>"
    }
  }
}