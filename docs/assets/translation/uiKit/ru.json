{
  "title": "UI-кит",
  "description": "<p>Наш UI Kit и компоненты проекта созданы с использованием мощного фреймворка <span class='font-600'>Tailwind CSS</span>, который обеспечивает быструю и удобную стилизацию интерфейса. Мы расширили его возможности собственными стилями, что позволяет нам легко адаптировать и поддерживать единый дизайн на всех страницах приложения.</p><p>Основные компоненты форм в нашем проекте унаследованы от <span class='font-600'>Angular Material</span>, что обеспечивает высокую степень надежности и качества. Однако, для удовлетворения уникальных потребностей проекта, эти компоненты форм дополнены необходимым функционалом. Такой подход не только обеспечивает стандартизированный и красивый внешний вид, но и гармонично интегрирует дополнительные возможности, специфичные для наших пользовательских требований.</p><p>Использование <span class='font-600'>Tailwind CSS</span> в сочетании с расширенными компонентами форм <span class='font-600'>Angular Material</span> создает мощный и гибкий инструментарий для создания современного и функционального пользовательского интерфейса, гармонично сочетая в себе преимущества обоих подходов.</p>",
  "usageExamples": "Примеры использования",
  "usageExample": "Пример использования",
  "tailwindConfig": "Конфигурация Tailwind",
  "settings": "Основные настройки",
  "menu": {
    "overview": "Обзор",
    "typography": "Типографика",
    "icons": "Иконки",
    "colors": "Цвета",
    "buttons": "Кнопки",
    "inputs": "Инпуты",
    "dropdowns": "Дропдауны",
    "checkboxes": "Чекбоксы",
    "radioButtons": "Радио-баттоны",
    "switchers": "Свичеры",
    "avatars": "Аватарки",
    "dividers": "Разделители"
  },
  "uiElementsStates": {
    "default": "По умолчанию",
    "noLabel": "Без лейбла",
    "dividedOptions": "Опции с разделителями",
    "placeholder": "Плейсхолдер",
    "hovered": "При наведении",
    "pressed": "При нажатии",
    "focused": "При фокусе",
    "filled": "Заполнен",
    "disabledFilled": "Заполнен (отключен)",
    "disabled": "Отключен",
    "described": "С описанием",
    "describedDisabled": "С описанием (отключен)",
    "required": "Обязательное",
    "describedRequired": "С описанием (обязательное)",
    "expander": "Экспандер",
    "roundedExpnader": "Экспандер (скругленный)",
    "resetIcon": "Иконка cброса",
    "rightIcon": "Иконка справа",
    "resetRightIcon": "Иконка справа + сброс",
    "leftIcon": "Иконка слева",
    "resetLeftIcon": "Иконка слева + сброс",
    "allIcons": "Все иконки",
    "fullwidth": "На всю ширину",
    "colorValidated": "Валидация цветом",
    "colorValidatedIcon": "Валидация цветом + иконка",
    "colorInvalidated": "Валидация цветом (ошибка)",
    "colorInvalidatedError": "Валидация цветом (только ошибка)",
    "colorInvalidatedIcon": "Валидация цветом (ошибка) + иконка",
    "colorValidatedResetIcon": "Валидация цветом + иконка + сброс",
    "colorInvalidatedResetIcon": "Валидация цветом (ошибка) + иконка + сброс",
    "allSettingsEnabledValidated": "Все опции включены",
    "allSettingsEnabledInvalidated": "Все опции включены (ошибка)",
    "multiple": "Множественный",
    "checked": "Выбран",
    "checkedDisabled": "Выбран (отключен)",
    "fieldDescription": "Описание для поля",
    "rounded": "Скругленный",
    "roundedDisabled": "Скругленный (отключен)",
    "accentedGrey": "Акцентированный серый",
    "accented": "Акцентированный серый",
    "bordered": "С границей",
    "labelSmall": "Лейбл S",
    "labelMedium": "Лейбл M",
    "labelLarge": "Лейбл L",
    "presetSmall": "S ― малый",
    "presetMedium": "M ― средний",
    "presetLarge": "L ― большой",
    "presetsSmall": "S ― малые",
    "presetsMedium": "M ― средние",
    "presetsLarge": "L ― большие",
    "inputPresetSmall": "S ― 200px",
    "inputPresetMedium": "M ― 228px",
    "inputPresetLarge": "L ― 256px",
    "verticals": "Вертикальные",
    "horizontals": "Горизонтальные",
    "cssClass": "CSS-класс",
    "submit": "Готово",
    "loading": "Загрузка",
    "type": "Тип"
  },
  "pages": {
    "typography": {
      "title": "Типографика",
      "description": "<p><strong>TextComponent</strong> ― универсальный компонент Angular, предназначенный для отображения текста с различными опциями стилизации (размер шрифта, межстрочный интервал, цвет и т.п.). Для универсального отображения текстов в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>font</code>:</strong> размер шрифта из коллекции <code>FontSizesEnum</code>. Значение по умолчанию ― <code>FontSizesEnum.Sm</code> (14/22 ― см. конфигурацию Tailwind).</li><li><strong><code>size</code>:</strong> произвольный размер шрифта (число ― см. конфигурацию Tailwind). В совокупности с <code>lineHeight</code> значение <code>font</code><strong><code> </code></strong>будет проигнирировано.</li><li><strong><code>lineHeight</code>:</strong> межстрочный интервал (число ― см. конфигурацию Tailwind). В совокупности с <code>size</code> значение <code>font</code><strong><code> </code></strong>будет проигнирировано.</li><li><strong><code>weight</code>:</strong> насыщенность шрифта из коллекции <code>FontWeightsEnum</code> (от 100 до 900 с шагом в 100 единиц). Значение по умолчанию ― <code>FontWeightsEnum.400</code>.</li><li><strong><code>color</code>:</strong> цвет текста (строка). Можно задать имя класса (например <code>text_secondary</code>) или собственное значение цвета (<code>#FF0000</code>).</li></ul><p>Компонент динамически генерирует CSS-классы на основе входных свойств, применяя их к элементу-хосту. Это позволяет контролировать стиль текста во всем проекте.</p><p>Для использования компонента нужно добавить тег <code>&lt;app-text&gt;</code> в HTML-шаблон требуемого компонента и указать необходимые свойства.</p>",
      "headings": "Заголовки",
      "text": "Текст",
      "defaultText": "Быстро съедаем жгучий пельмень.",
      "exampleText": "Пример текста"
    },
    "colors": {
      "title": "Цвета",
      "description": "<p>В процессе разработки активно используется фреймворк <strong>Tailwind CSS</strong>. Наш проект дополняется кастомными цветами в файле <code>tailwind.config.ts</code> в секции <code>themes</code>, которые в свою очередь задаются в файле <code>/styles/tailwind.scss</code> (секция <code>@layer base</code>). Это не только расширяет возможности Tailwind, но и предоставляет уникальную цветовую палитру, специфичную для наших дизайнерских потребностей. Такой подход не только повышает управляемость стилями, но и обеспечивает согласованность цветовой гаммы во всем приложении. В разделе <code>theme</code> определены значения цветов с использованием пользовательских свойств, таких как <code>--background_primary</code>, <code>--text_primary</code>, и т. д., что обеспечивает централизованный способ управления и обновления цветовой палитры.</p><p>Ниже представлены все пользовательские цвета, которые используются в нашем приложении.</p>",
      "background": "Фон",
      "text": "Текст",
      "border": "Граница",
      "colors": "Цвета",
      "cssClass": "CSS-класс"
    },
    "icons": {
      "title": "Иконки",
      "description": "<p><strong>IconComponent</strong> ― универсальный компонент Angular, предназначенный для отображения иконок с различными опциями стилизации (имя иконки, размер, цвет и т.п.). Для универсального отображения иконок в проекте нужно использовать данный компонент и коллекцию <code>IconsEnum</code>. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>icon</code>:</strong> принимает имя используемой иконки (желательно использовать имена из коллекции <code>IconsEnum</code>).</li><li><strong><code>size</code>:</strong> размер иконки из коллекции <code>IconSizesEnum</code>. Значение по умолчанию ― <code>IconSizesEnum.Medium</code> (24px ― см. конфигурацию Tailwind).</li><li><strong><code>color</code>:</strong> цвет текста (строка). По умолчанию используется цвет <code>text_primary</code> (см. конфигурацию Tailwind).</li><li><strong><code>cssClass</code>:</strong> CSS-классы (строка) для дополнительной стилизации иконки.</li><li><strong><code>isFilled</code>:</strong> индикатор заливки иконки цветом. По умолчанию ― <code>false</code> (цвет применяется для контуров иконки). В случае указания свойства равным  <code>true</code> к иконке будет применена заливка вместо котурной обводки</li><li><strong><code>iconClick</code>:</strong> обработчик события клика на иконку.</li></ul><p>Для использования компонента нужно добавить тег <code>&lt;app-icon&gt;</code> в HTML-шаблон требуемого компонента и указать необходимые свойства и обработчики.</p>",
      "nothingFound": {
        "title": "Ничего не найдено",
        "description": "В нашей коллекции нет иконки с именем "
      },
      "searchByTitle": "Поиск по названию"
    },
    "buttons": {
      "title": "Кнопки",
      "description": "<p>Компонент <strong>ButtonComponent</strong> представляет собой переиспользуемый компонент <strong>Angular Material</strong> кнопки, который позволяет настроить различные ее опции, такие как размер и тип кнопки, наличие иконок справа или слева о лейбла кнопки, управлять состоянием (активная или отключенная) и т. д. Для универсального отображения кнопок в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>cssClass</code></strong>: CSS-классы (строка) для дополнительной стилизации кнопок.</li><li><strong><code>isLoading</code></strong>: индикатор состояния загрузки на кнопке в виде спиннера, который отображается если задано значение <code>true</code>.</li><li><strong><code>isDisabled</code></strong>: индикатор состояния кнопки ― задизэйблена при значении равным <code>true</code> и наоборот.</li><li><strong><code>disableRipple</code></strong>: эффект волны при клике (Angular Material). По умолчанию ― <code>true</code>. По умолчанию ― <code>false</code>.</li><li><strong><code>leftIcon</code></strong>: иконка, расположенная слева от текста кнопки (коллекия <code>IconsEnum</code>).</li><li><strong><code>rightIcon</code></strong>: иконка, расположенная справа от текста кнопки (коллекия <code>IconsEnum</code>).</li><li><strong><code>label</code></strong>: лейбл кнопки (строка).</li><li><strong><code>size</code></strong>: размер кнопки (коллекция <code>ControlSizesEnum</code>). По умолчанию ― <code>ControlSizesEnum.Small</code>.</li><li><strong><code>type</code></strong>: тип кнопки (коллекция <code>ButtonTypesEnum</code>). По умолчанию ― <code>ButtonTypesEnum.Primary</code>.</li><li><strong><code>buttonClick</code></strong>: обработчик нажатия на кнопку.</li><li><strong><code>buttonFocus</code></strong>: обработчик получения кнопкой фокуса.</li></ul><p>Для использования компонента необходимо вставить тег <code>&lt;app-button&gt;</code> в HTML-шаблон требуемого компонента и указать необходимые свойства и обработчики.</p>"
    },
    "inputs": {
      "title": "Инпуты",
      "description": "<p><strong>InputComponent</strong> ― это универсальный переиспользуемый компонент, наследующий поведение инпута из <strong>Angular Material</strong> и предназначенный для управления элементами ввода в формах с обширными опциями настройки (размер, наличие лейбла, тип ввода, кнопка сброса и т. д.). Этот компонент также наследуется от директивы <code>ControlDirective</code> для эффективного управления контролом. Для универсального отображения инпутов в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>max</code></strong>: максимальное значение (число), используется если задан тип инпута <code>InputTypesEnum.Number</code>.</li><li><strong><code>min</code></strong>: минимальное значение (число), используется если задан тип инпута <code>InputTypesEnum.Number</code>.</li><li><strong><code>mask</code></strong>: маска ввода (строка), используется если задан тип инпута <code>InputTypesEnum.Text</code>.</li><li><strong><code>step</code></strong>: шаг ввода (число), используется если задан тип инпута <code>InputTypesEnum.Number</code>.</li><li><strong><code>showLabel</code></strong>: индикатор отображения лейбла для инпута. По умолчанию ― <code>true</code>.</li><li><strong><code>inputClass</code></strong>: CSS-классы (строка) для дополнительной стилизации кнопок</li><li><strong><code>isAutoWidth</code></strong>: индикатор использования ширины инпута по содержимому. По умолчанию ― <code>false</code>.</li><li><strong><code>leftIcon</code></strong>: иконка, расположенная слева от области ввода внутри инпута (коллекия <code>IconsEnum</code>).</li><li><strong><code>rightIcon</code></strong>: иконка, расположенная справа от области ввода внутри инпута (коллекия <code>IconsEnum</code>).</li><li><strong><code>isResetEnabled</code></strong>: индикатор отображения иконки сброса значения. По умолчанию ― <code>false</code>.</li><li><strong><code>initValidation</code></strong>: индикатор валидации инпута до ввода значений. По умолчанию ― <code>false</code>.</li><li><strong><code>showValidationsError</code></strong>: индикатор отображения валидационных ошибок. По умолчанию ― <code>true</code>.</li><li><strong><code>showValidationIcons</code></strong>: индикатор отображения валидационных иконок. По умолчанию ― <code>false</code>.</li><li><strong><code>showVisualValidation</code></strong>: индикатор отображения визуальной валидации (зеленый ― для успешной валидации и красный ― для неуспешной). По умолчанию ― <code>false</code>.</li><li><strong><code>isFullwidth</code></strong>: индикатор применения ширины инпута в 100%. По умолчанию ― <code>false</code>.</li><li><strong><code>type</code>: </strong>тип инпута (коллекция <code>InputTypesEnum</code>). Значение по умолчанию ― <code>InputTypesEnum.Text</code>.</li><li><strong><code>size</code>: </strong>размер инпута (коллекция <code>ControlSizesEnum</code>). Значение по умолчанию ― <code>ControlSizesEnum.Sm</code> (ширина ― 200px).</li><li><strong><code>blur</code></strong>: обработчик события потери фокуса инпутом.</li><li><strong><code>focus</code></strong>: обработчик события получения фокуса инпутом.</li><li><strong><code>valueChanged</code></strong>: обработчик события изменения значения инпута.</li><li><strong><code>keyboardEvent</code></strong>: обработчик событий клавиатуры для инпута.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-input&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства и обработчики.</p>"
    },
    "dropdowns": {
      "title": "Дропдауны",
      "description": "<p><strong>DropdownComponent</strong> ― это универсальный переиспользуемый компонент, наследующий поведение дропдауна из <strong>Angular Material</strong> и предназначенный для управления элементами выпадающего списка в формах с обширными опциями настройки (размер, наличие лейбла, тип ввода, кнопка сброса и т. д.). Этот компонент также наследуется от директивы <code>ControlDirective</code> для эффективного управления контролом. Для универсального отображения дропдаунов в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>multiple</code></strong>: индикатор множественного выбора опций. По умолчанию ― <code>true</code>.</li><li><strong><code>showLabel</code></strong>: индикатор отображения лейбла для дропдауна. По умолчанию ― <code>true</code>.</li><li><strong><code>leftIcon</code></strong>: иконка, расположенная слева от значения дропдауна (коллекия <code>IconsEnum</code>).</li><li><strong><code>isAutoWidth</code></strong>: индикатор использования ширины инпута по содержимому. По умолчанию ― <code>false</code>.</li><li><strong><code>initValidation</code></strong>: индикатор валидации дропдауна до ввода значений. По умолчанию ― <code>false</code>.</li><li><strong><code>isResetEnabled</code></strong>: индикатор отображения иконки сброса значения. По умолчанию ― <code>false</code>.</li><li><strong><code>isDividedOptions</code></strong>: индикатор использования разделителей в списке опций. По умолчанию ― <code>false</code>.</li><li><strong><code>panelClasses</code></strong>: CSS-классы для дополнительной стилизации панели опций.</li><li><strong><code>showValidationsError</code></strong>: индикатор отображения валидационных ошибок. По умолчанию ― <code>true</code>.</li><li><strong><code>showValidationIcons</code></strong>: индикатор отображения валидационных иконок. По умолчанию ― <code>false</code>.</li><li><strong><code>showVisualValidation</code></strong>: индикатор отображения визуальной валидации (зеленый ― для успешной валидации и красный ― для неуспешной). По умолчанию ― <code>false</code>.</li><li><strong><code>isFullwidth</code></strong>: индикатор применения ширины дропдауна в 100%. По умолчанию ― <code>false</code>.</li><li><strong><code>size</code>: </strong>размер инпута (коллекция <code>ControlSizesEnum</code>). Значение по умолчанию ― <code>ControlSizesEnum.Sm</code> (ширина ― 200px).</li><li><strong><code>blur</code></strong>: обработчик события потери фокуса дропдауном.</li><li><strong><code>focus</code></strong>: обработчик события получения фокуса дропдауном.</li><li><strong><code>valueChanged</code></strong>: обработчик события изменения значения дропдауна.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-dropdown&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства и обработчики.</p>"
    },
    "checkboxes": {
      "title": "Чекбоксы",
      "description": "<p><strong>CheckboxComponent</strong> ― это универсальный переиспользуемый компонент, наследующий поведение чекбокса из <strong>Angular Material</strong> и предназначенный для управления элементами множественного выбора с обширными опциями настройки (размер, наличие описания, режим экспандера и т. д.). Этот компонент также наследуется от директивы <code>ControlDirective</code> для эффективного управления контролом. Для универсального отображения чекбоксов в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: индикатор состояния выбранного чекбокса. По умолчанию ― <code>false</code>.</li><li><strong><code>isRounded</code></strong>: индикатор округлого стиля чекбокса. По умолчанию ― <code>false</code>.</li><li><strong><code>label</code></strong>: лейбл чекбокса (строка).</li><li><strong><code>disableRipple</code></strong>: эффект волны при клике (Angular Material). По умолчанию ― <code>true</code>.</li><li><strong><code>isExpandMode</code></strong>: индикатор режима экспандера чекбокса. По умолчанию ― <code>false</code>.</li><li><strong><code>description</code></strong>: описание чекбокса (строка).</li><li><strong><code>size</code>: </strong>размер чекбокса (коллекция <code>ControlSizesEnum</code>). Значение по умолчанию ― <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: обработчик события изменения значения чекбокса.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-checkbox&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства и обработчики.</p>"
    },
    "radioButtons": {
      "title": "Радио-баттоны",
      "description": "<p><strong>RadioButtonComponnent</strong> ― это универсальный переиспользуемый компонент, наследующий поведение радио-баттона из <strong>Angular Material</strong> и предназначенный для управления элементами одинарного выбора с обширными опциями настройки (размер, наличие описания и т. д.). Для универсального отображения радио-баттонов в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: индикатор состояния выбранного радио-баттона. По умолчанию ― <code>false</code>.</li><li><strong><code>label</code></strong>: лейбл радио-баттона (строка).</li><li><strong><code>isRequired</code></strong>: индикатор состояния радио-баттона (обязательный / не обязательный).</li><li><strong><code>isTestMode</code></strong>: индикатор режима тестирования (в этом режиме контрол может быть нажат даже в отключенном состоянии). По умолчанию ― <code>false</code>.</li><li><strong><code>disableRipple</code></strong>: эффект волны при клике (Angular Material). По умолчанию ― <code>true</code>.</li><li><strong><code>description</code></strong>: описание радио-баттона (строка).</li><li><strong><code>control</code>:</strong> контрол радио-баттона (<code>UntypedFormControl</code>).</li><li><strong><code>size</code>: </strong>размер радио-баттона (коллекция <code>ControlSizesEnum</code>). Значение по умолчанию ― <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: обработчик события изменения значения чекбокса.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-radio-button&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства и обработчики.</p>"
    },
    "switchers": {
      "title": "Свичеры",
      "description": "<p><strong>SwitcherComponent</strong> ― это универсальный переиспользуемый компонент, наследующий поведение свичера из <strong>Angular Material</strong> и предназначенный для управления элементами одиночного выбора с обширными опциями настройки (размер, наличие описания, и т. д.). Этот компонент также наследуется от директивы <code>ControlDirective</code> для эффективного управления контролом. Для универсального отображения свичеров в проекте нужно использовать данный компонент. Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: индикатор состояния выбранного свичера. По умолчанию ― <code>false</code>.</li><li><strong><code>label</code></strong>: лейбл чекбокса (строка).</li><li><strong><code>disableRipple</code></strong>: эффект волны при клике (Angular Material). По умолчанию ― <code>true</code>.</li><li><strong><code>isAccentGrey</code></strong>: индикатор акценного серого цвета для свичера. По умолчанию ― <code>false</code>.</li><li><strong><code>description</code></strong>: описание свичера (строка).</li><li><strong><code>size</code>: </strong>размер свичера (коллекция <code>ControlSizesEnum</code>). Значение по умолчанию ― <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: обработчик события изменения значения чекбокса.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-switcher&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства и обработчики.</p>"
    },
    "avatars": {
      "title": "Аватарки",
      "description": "<p><strong>AvatarComponent</strong> ― это универсальный переиспользуемый компонент Angular, разработанный для отображения аватарок пользователей с опциями настройки (источник изображения, размер и наличие границы вокруг аватарки). Ниже указаны все возможные варианты использования компонента.</p>",
      "settings": "<ul><li><strong><code>src</code></strong>: источник изображения. Если изображение не удасться загрузить, используется изображение-заглушка по умолчанию ― &#39;user-01.svg&#39;.</li><li><strong><code>size</code></strong>: размер аватарки (коллекция <code>AvatarSizesEnum</code>). Значение по умолчанию ― <code>AvatarSizesEnum.s32</code> (ширина и высота ― 32px).</li><li><strong><code>hasBorder</code></strong>: индикатор наличия границы вокруг аватарки. По умолчанию ― <code>false</code>.</li></ul><p>Для использования компонента необходимо добавить тег <code>&lt;app-avatar&gt;</code> в HTML-шаблон нужного компонента и указать необходимые свойства.</p>"
    },
    "dividers": {
      "title": "Разделители",
      "description": "<p>Кастомные разделители разработаны на базе классов  <strong>Tailwind CSS</strong> <code>divide-y</code>, <code>divide-x</code> в совокупности с <code>border-border_primary</code>.</p><p>Ниже представлены все варианты использования разделителей, которые используются в нашем приложении.</p>"
    }
  }
}