{
  "title": "UI Kit",
  "description": "<p>Our UI Kit and project components are built using the powerful <span class='font-600'>Tailwind CSS</span> framework, enabling swift and convenient interface styling. We've expanded its capabilities with our own styles, allowing for easy adaptation and maintenance of a consistent design across all application pages.</p><p>The core form components in our project inherit from <span class='font-600'>Angular Material</span>, ensuring high reliability and quality. However, to meet the unique needs of the project, these form components are enhanced with specific functionalities. This approach not only provides a standardized and visually appealing appearance but also seamlessly integrates additional features tailored to our user requirements.</p><p>The use of <span class='font-600'>Tailwind CSS</span>, combined with extended <span class='font-600'>Angular Material</span> form components, creates a robust and flexible toolkit for crafting a modern and functional user interface. This harmonious blend leverages the strengths of both approaches to deliver a comprehensive solution for our project's UI development.</p>",
  "usageExamples": "Usage examples",
  "usageExample": "Usage example",
  "settings": "Key Features and Customization Options",
  "tailwindConfig": "Tailwind configuration",
  "menu": {
    "overview": "Overview",
    "typography": "Typography",
    "icons": "Icons",
    "colors": "Colors",
    "buttons": "Buttons",
    "inputs": "Inputs",
    "dropdowns": "Dropdowns",
    "checkboxes": "Checkboxes",
    "radioButtons": "Radio-buttons",
    "switchers": "Switchers",
    "avatars": "Avatars",
    "dividers": "Dividers"
  },
  "uiElementsStates": {
    "default": "Default",
    "noLabel": "No label",
    "dividedOptions": "Divided options",
    "placeholder": "Placeholder",
    "hovered": "Hovered",
    "pressed": "Pressed",
    "focused": "Focused",
    "filled": "Filled",
    "disabledFilled": "Filled (disabled)",
    "disabled": "Disabled",
    "described": "Described",
    "describedDisabled": "Described (disabled)",
    "required": "Required",
    "describedRequired": "Described (required)",
    "expander": "Expander",
    "roundedExpnader": "Expander (rounded)",
    "resetIcon": "Reset icon",
    "rightIcon": "Right icon",
    "resetRightIcon": "Right icon + reset",
    "leftIcon": "Left icon",
    "resetLeftIcon": "Left icon + reset",
    "allIcons": "All icons",
    "fullwidth": "Fullwidth",
    "colorValidated": "Color validation",
    "colorValidatedIcon": "Color validation + icon",
    "colorInvalidated": "Color validation (error)",
    "colorInvalidatedError": "Color validation (error only)",
    "colorInvalidatedIcon": "Color validation (error) + icon",
    "colorValidatedResetIcon": "Color validation + icon + reset",
    "colorInvalidatedResetIcon": "Color validation (error) + icon + reset",
    "allSettingsEnabledValidated": "All options enabled (valid)",
    "allSettingsEnabledInvalidated": "All options enabled (invalid)",
    "multiple": "Multiple",
    "checked": "Checked",
    "checkedDisabled": "Checked (disabled)",
    "fieldDescription": "Description for the field",
    "rounded": "Rounded",
    "roundedDisabled": "Rounded (disabled)",
    "accentedGrey": "Accented grey",
    "bordered": "Bordered",
    "labelSmall": "Label small",
    "labelMedium": "Label medium",
    "labelLarge": "Label large",
    "presetSmall": "Small",
    "presetMedium": "Medium",
    "presetLarge": "Large",
    "verticals": "Verticals",
    "horizontals": "Horizontals",
    "cssClass": "CSS-class",
    "submit": "Submit",
    "loading": "Loading"
  },
  "pages": {
    "typography": {
      "title": "Typography",
      "description": "<p>Typography in web design plays a crucial role in determining the visual perception and readability of content. Thoughtfully chosen fonts, sizes, and letter spacing ensure comfortable reading and an appealing appearance for web pages. Modern web browsers provide rich capabilities for working with fonts, allowing designers to create unique and stylish font combinations.</p><p>Adaptability is a key aspect of web typography. Considering various devices and screen sizes, designers need to select fonts and settings that make text look clear and readable on both desktop computers and mobile devices. Typography elements can also be used to emphasize the hierarchy of information by highlighting headers, subheadings, and main text.</p><p>Special attention is given to web fonts designed specifically for online use. These fonts ensure high readability and quick page loading, which is crucial for enhancing the user experience on websites. Combining aesthetics and functionality, proper typography is an integral part of successful web design, creating a pleasant and informative visual perception of content.</p>",
      "settings": "<ul><li><strong>Font Size (<code>font</code>):</strong> Specify the font size using predefined enum values such as <code>FontSizesEnum.Sm</code>, or provide a custom size if needed.</li><li><strong>Custom Size (<code>size</code>):</strong> Optionally set a custom font size for precise customization.</li><li><strong>Line Height (<code>lineHeight</code>):</strong> Define a custom line height for the text, ensuring proper spacing between lines and readability.</li><li><strong>Font Weight (<code>weight</code>):</strong> Choose the font weight using predefined enum values (e.g., <code>FontWeightsEnum.FW_400</code>), affecting the thickness of the text.</li><li><strong>Text Color (<code>color</code>):</strong> Specify the text color using a predefined class name or a custom color value (e.g., <code>text_primary</code> or <code>#FF0000</code>).</li></ul><p>The component dynamically generates CSS classes based on input properties, applying them to the host element. This ensures easy integration into Angular applications and guarantees a consistent and visually appealing text style throughout the project.</p><p>To use the component, include the <code>&lt;app-text&gt;</code> tag in your template and provide the necessary input properties for configuration. This component plays a crucial role in maintaining a cohesive and polished visual style across the entire application, contributing to a natural and engaging user experience.</p>",
      "headings": "Headings",
      "text": "Text",
      "defaultText": "The quick brown fox jumps over a lazy dog.",
      "exampleText": "Example text"
    },
    "colors": {
      "title": "Colors",
      "description": "<p>During the development process, the <span class='font-600'><span class='font-600'><span class='font-600'>Tailwind CSS</span></span></span> framework is actively utilized. Our project is complemented with custom colors in the tailwind.config.ts file under the themes section. This not only extends Tailwind's capabilities but also provides a unique color palette tailored to our design needs. Such an approach not only enhances style manageability but also ensures color consistency throughout the entire application, where <span class='font-600'><span class='font-600'>Tailwind CSS</span></span> plays a crucial role in effective interface development. The <code>theme</code> section defines color values using custom properties such as <code>--background_primary</code>, <code>--text_primary</code>, etc., enabling a centralized way to manage and update the color palette.</p>",
      "background": "Background",
      "text": "Text",
      "border": "Border",
      "colors": "Colors",
      "cssClass": "CSS-class"
    },
    "icons": {
      "title": "Icons",
      "description": "<p>The <span class='font-600'>IconComponent</span> is a versatile Angular component designed for convenient display of icons with multiple configuration options. This component aims to provide flexibility and simplicity in integrating icons into the project's user interface.</p>",
      "settings": "<ul><li><strong>Icon (<code>icon</code>):</strong> Takes an input value to specify the icon used. This can be an object, string, or another format depending on the project&#39;s requirements.</li><li><strong>Size (<code>size</code>):</strong> Allows specifying the icon size using predefined enum values (e.g., <code>IconSizesEnum.Medium</code>). This ensures consistency in icon sizes throughout the application.</li><li><strong>Color (<code>color</code>):</strong> Defines the icon color using a predefined class name or a custom color value. This provides control over the icon color scheme in the application.</li><li><strong>Additional CSS Classes (<code>cssClass</code>):</strong> Provides the ability to add custom CSS classes to the icon for additional styling or integration with other components.</li><li><strong>Click Event (<code>iconClick</code>):</strong> Triggered when the icon is clicked, allowing for responses to user actions.</li></ul><p>The component dynamically manages the styles of the icon by applying them to the SVG element. It also offers a callback when the icon is clicked, making it a powerful tool for creating interactive user interfaces.</p><p>To use the <code>IconComponent</code>, include the <code>&lt;app-icon&gt;</code> tag in your template and provide the necessary input properties. This component makes it easy to integrate and style icons in the application, making it visually appealing and user-friendly.</p>",
      "nothingFound": {
        "title": "Nothing found",
        "description": "In our collection, there is no icon with the name"
      },
      "searchByTitle": "Search by title"
    },
    "buttons": {
      "title": "Buttons",
      "description": "<p>The <span class='font-600'>ButtonComponent</span> component represents a reusable Angular Material button component that allows you to customize various aspects of it, such as icons, size, type, and so on.</p>",
      "settings": "<ul><li><strong><code>icon</code></strong>: Button icon.</li><li><strong><code>cssClass</code></strong>: Additional CSS classes to customize the button style.</li><li><strong><code>isLoading</code></strong>: Set to true if the button is in a loading state.</li><li><strong><code>isDisabled</code></strong>: Set to true if the button should be disabled.</li><li><strong><code>disableRipple</code></strong>: Set to true to disable the ripple effect on click.</li><li><strong><code>leftIcon</code></strong>: Icon located to the left of the button text.</li><li><strong><code>rightIcon</code></strong>: Icon located to the right of the button text.</li><li><strong><code>label</code></strong>: Text content of the button.</li><li><strong><code>size</code></strong>: Button size.</li><li><strong><code>type</code></strong>: Button type.</li></ul><p>To use the component, insert the <code><app-button></code> tag into your template and pass the appropriate input properties to customize the component.</p>"
    },
    "inputs": {
      "title": "Inputs",
      "description": "<p>The <span class='font-600'>InputComponent</span> is a versatile Angular component designed for managing input controls within forms, offering extensive customization options. This component extends the ControlDirective for effective form control management.</p>",
      "settings": "<ul><li><strong>Size (<code>size</code>)</strong>: Specify the size of the input using predefined enum values (e.g., <code>ControlSizesEnum.Medium</code>).</li><li><strong>Label Display (<code>showLabel</code>)</strong>: Control whether to display the label for the input with the <code>showLabel</code> property.</li><li><strong>Input Type (<code>type</code>)</strong>: Define the type of the input through the <code>type</code> property.</li><li><strong>Validation Error Display (<code>showValidationsError</code>)</strong>: Choose whether to show validation errors with the <code>showValidationsError</code> property.</li><li><strong>Reset Button (<code>isResetEnabled</code>)</strong>: Enable or disable the reset button with the <code>isResetEnabled</code> property.</li><li><strong>Validation Icons (<code>showValidationIcons</code>)</strong>: Toggle the display of validation icons using the <code>showValidationIcons</code> property.</li><li><strong>Visual Validation (<code>showVisualValidation</code>)</strong>: Opt for visual validation of the input with the <code>showVisualValidation</code> property.</li><li><strong>Full-width Input (<code>isFullwidth</code>)</strong>: Specify whether the input should span the full width with the <code>isFullwidth</code> property.</li><li><strong>Icon Support (<code>leftIcon</code>&nbsp;and <code>rightIcon</code>)</strong>: Incorporate left and right icons using the <code>leftIcon</code> and <code>rightIcon</code> properties.</li><li><strong>Initial Validation (<code>initValidation</code>)</strong>: Control whether to initialize validation on component load with the <code>initValidation</code> property.</li><li><strong>Masking (<code>maskType</code>&nbsp;and <code>mask</code>)</strong>: For number inputs, choose a mask type and define the mask through <code>maskType</code> and <code>mask</code> properties.</li><li><strong>Additional Styling (<code>inputClass</code>&nbsp;and <code>class</code>)</strong>: Apply additional CSS classes to the input and input element with the <code>class</code> and <code>inputClass</code> properties.</li></ul><p>To integrate the component into your template, insert the <code>&lt;app-input&gt;</code> tag at the desired location and pass the corresponding input properties for customization. For example, you can specify the size, label display, input type, and other parameters by passing the appropriate values through attributes.</p><p>This component, extending the functionality of Angular Material, provides extensive customization options for managing input elements in forms. Incorporating it into your project will assist not only in form management but also in creating a consistent and visually appealing user interface.</p>"
    },
    "dropdowns": {
      "title": "Dropdowns",
      "description": "<p>The <span class='font-600'>DropdownComponent</span> is a versatile Angular component designed to manage dropdown lists in forms with extensive customization options. This component extends <span class='font-600'>ControlDirective</span> for efficient form control.</p>",
      "settings": "<ul><li><strong>Multiple (<code>multiple</code>):</strong> Determines whether multiple items can be selected in the list (default is <code>false</code>).</li><li><strong>Panel Classes (<code>panelClasses</code>):</strong> Classes that can be applied to the dropdown panel.</li><li><strong>Preloaded Options (<code>preloadedOptions</code>):</strong> Preloaded options to be displayed in the dropdown list.</li><li><strong>Size (<code>size</code>):</strong> Control size (enum from <code>ControlSizesEnum</code>).</li><li><strong>Show Label (<code>showLabel</code>):</strong> Controls the display of a label above the control.</li><li><strong>Type (<code>type</code>):</strong> Control type (enum from <code>InputTypesEnum</code>).</li><li><strong>Show Validation Errors (<code>showValidationsError</code>):</strong> Chooses whether to display validation error messages.</li><li><strong>Reset Button (<code>isResetEnabled</code>):</strong> Enables or disables the reset button in the control.</li><li><strong>Validation Icons (<code>showValidationIcons</code>):</strong> Toggles the display of validation icons.</li><li><strong>Visual Validation (<code>showVisualValidation</code>):</strong> Chooses visual validation effects.</li><li><strong>Fullwidth (<code>isFullwidth</code>):</strong> Specifies whether the control should span the full width.</li><li><strong>Left Icon (<code>leftIcon</code>):</strong> Icon to the left of the control (enum from <code>IconsEnum</code>).</li><li><strong>Init Validation (<code>initValidation</code>):</strong> Initiates validation upon component initialization.</li></ul><p>To integrate the component into your template, insert the <code>&lt;app-dropdown&gt;</code> tag and pass the corresponding input properties to customize the component.</p>"
    },
    "checkboxes": {
      "title": "Checkboxes",
      "description": "<p>The <span class='font-600'>CheckboxComponent</span> - represents a customizable Angular component for handling checkboxes in forms.</p>",
      "settings": "<ul><li><strong>Checkbox size (<code>size</code>):</strong> Determines the size of the checkbox using predefined values.</li><li><strong>Label (<code>label</code>):</strong> Checkbox label.</li><li><strong>Checbox description (<code>description</code>):</strong> Additional information or context for better user understanding.</li><li><strong>Checked state (<code>checked</code>):</strong> Specifies the initial checked state of the checkbox.</li><li><strong>Rounded borders (<code>isRounded</code>):</strong> Shapes the checkbox into a rounded form for a distinctive visual style.</li><li><strong>Expand mode (<code>isExpandMode</code>):</strong> Checkbox that, when clicked, opens an additional content block.</li></ul><p>To integrate the component, insert the <code><app-checkbox></code> tag into your template and pass the corresponding input properties for customization.</p>"
    },
    "radioButtons": {
      "title": "Radio-buttons",
      "description": "<p>The <span class='font-600'>RadioButtonComponent</span> is an Angular component designed for working with radio buttons in forms. Utilize the provided input properties to customize the radio button according to your requirements and respond to the `change` event for effective user interaction handling.</p>",
      "settings": "<ul><li><strong>Radio-button size (<code>size</code>):</strong> Determines the size of the radio button using predefined values.</li><li><strong>Label (<code>label</code>):</strong> Text label associated with the radio button.</li><li><strong>Radio-button description (<code>description</code>):</strong> Additional information or context for better user understanding.</li><li><strong>Checked state (<code>checked</code>):</strong> Specifies the initial checked state of the radio button.</li><li><strong>Form control (<code>control</code>):</strong> Represents the form control for the radio button.</li><li><strong>Required state (<code>isRequired</code>):</strong> Indicates whether the radio button is required.</li><li><strong>Test mode (<code>isTestMode</code>):</strong> Activates test mode for the radio button (able to click on disabled radio-button).</li></ul><p>To integrate the component, insert the <code>&lt;app-radio-button&gt;</code> tag into your template and pass the corresponding input properties for customization.</p>"
    },
    "switchers": {
      "title": "Switchers",
      "description": "<p>The <span class='font-600'>SwitcherComponent</span> is an Angular component designed to provide a customizable switch or toggle functionality within forms.</p>",
      "settings": "<ul><li><strong>Switcher size (<code>size</code>):</strong> Determines the size of the switch using predefined values.</li><li><strong>Switcher label (<code>label</code>):</strong> Text label associated with the switch.</li><li><strong>Description (<code>description</code>):</strong> Additional information or context for better user understanding.</li><li><strong>Checked state (<code>checked</code>):</strong> Specifies the initial checked state of the switch.</li><li><strong>Form control (<code>control</code>):</strong> Represents the form control for the switch.</li><li><strong>&quot;Accent grey&quot; mode (isAccentGrey):</strong> Specifies whether the switch has an accent grey color.</li></ul><p>To integrate the component, insert the <code>&lt;app-switcher&gt;</code> tag into your template and pass the corresponding input properties for customization.</p>"
    },
    "avatars": {
      "title": "Avatars",
      "description": "<p>The <span class='font-600'>AvatarComponent</span> is an Angular component designed to display user avatars or images in a visually appealing and customizable way.</p>",
      "settings": "<ul><li><strong>Image source (<code>src</code>):</strong> Specifies the source URL of the avatar image. If the image fails to load, a default placeholder image (&#39;user-01.svg&#39;) is used.</li><li><strong>Avatar size (<code>size</code>):</strong> Determines the size of the avatar using predefined values from the AvatarSizesEnum.</li><li><strong>Border mode (<code>hasBorder</code>):</strong> Indicates whether the avatar should have a border.</li></ul><p>To integrate the component, insert the <code>&lt;app-avatar&gt;</code> tag into your template and pass the corresponding input properties for customization.</p>"
    }
  }
}