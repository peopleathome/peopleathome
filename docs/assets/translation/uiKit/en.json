{
  "title": "UI Kit",
  "description": "<p>Our UI Kit and project components are built using the powerful <span class='font-600'>Tailwind CSS</span> framework, enabling swift and convenient interface styling. We've expanded its capabilities with our own styles, allowing for easy adaptation and maintenance of a consistent design across all application pages.</p><p>The core form components in our project inherit from <span class='font-600'>Angular Material</span>, ensuring high reliability and quality. However, to meet the unique needs of the project, these form components are enhanced with specific functionalities. This approach not only provides a standardized and visually appealing appearance but also seamlessly integrates additional features tailored to our user requirements.</p><p>The use of <span class='font-600'>Tailwind CSS</span>, combined with extended <span class='font-600'>Angular Material</span> form components, creates a robust and flexible toolkit for crafting a modern and functional user interface. This harmonious blend leverages the strengths of both approaches to deliver a comprehensive solution for our project's UI development.</p>",
  "usageExamples": "Usage examples",
  "usageExample": "Usage example",
  "settings": "General settings",
  "tailwindConfig": "Tailwind configuration",
  "menu": {
    "overview": "Overview",
    "typography": "Typography",
    "icons": "Icons",
    "colors": "Colors",
    "buttons": "Buttons",
    "inputs": "Inputs",
    "dropdowns": "Dropdowns",
    "checkboxes": "Checkboxes",
    "radioButtons": "Radio-buttons",
    "switchers": "Switchers",
    "avatars": "Avatars",
    "dividers": "Dividers"
  },
  "uiElementsStates": {
    "default": "Default",
    "noLabel": "No label",
    "dividedOptions": "Divided options",
    "placeholder": "Placeholder",
    "hovered": "Hovered",
    "pressed": "Pressed",
    "focused": "Focused",
    "filled": "Filled",
    "disabledFilled": "Filled (disabled)",
    "disabled": "Disabled",
    "described": "Described",
    "describedDisabled": "Described (disabled)",
    "required": "Required",
    "describedRequired": "Described (required)",
    "expander": "Expander",
    "roundedExpnader": "Expander (rounded)",
    "resetIcon": "Reset icon",
    "rightIcon": "Right icon",
    "resetRightIcon": "Right icon + reset",
    "leftIcon": "Left icon",
    "resetLeftIcon": "Left icon + reset",
    "allIcons": "All icons",
    "fullwidth": "Fullwidth",
    "colorValidated": "Color validation",
    "colorValidatedIcon": "Color validation + icon",
    "colorInvalidated": "Color validation (error)",
    "colorInvalidatedError": "Color validation (error only)",
    "colorInvalidatedIcon": "Color validation (error) + icon",
    "colorValidatedResetIcon": "Color validation + icon + reset",
    "colorInvalidatedResetIcon": "Color validation (error) + icon + reset",
    "allSettingsEnabledValidated": "All options enabled (valid)",
    "allSettingsEnabledInvalidated": "All options enabled (invalid)",
    "multiple": "Multiple",
    "checked": "Checked",
    "checkedDisabled": "Checked (disabled)",
    "fieldDescription": "Description for the field",
    "rounded": "Rounded",
    "roundedDisabled": "Rounded (disabled)",
    "accentedGrey": "Accented grey",
    "bordered": "Bordered",
    "labelSmall": "Label small",
    "labelMedium": "Label medium",
    "labelLarge": "Label large",
    "presetSmall": "S ― small",
    "presetMedium": "M ― medium",
    "presetLarge": "L ― large",
    "presetsSmall": "S ― small",
    "presetsMedium": "M ― medium",
    "presetsLarge": "L ― large",
    "inputPresetSmall": "S ― 200px",
    "inputPresetMedium": "M ― 228px",
    "inputPresetLarge": "L ― 256px",
    "verticals": "Verticals",
    "horizontals": "Horizontals",
    "cssClass": "CSS-class",
    "submit": "Submit",
    "loading": "Loading",
    "type": "Type"
  },
  "pages": {
    "typography": {
      "title": "Typography",
      "description": "<p><strong>TextComponent</strong> ― a universal Angular component designed for displaying text with various styling options (font size, line height, color, etc.). This component should be used for universal text display in the project. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>font</code>:</strong> font size from the <code>FontSizesEnum</code> collection. Default value is <code>FontSizesEnum.Sm</code> (14/22 ― see Tailwind configuration).</li><li><strong><code>size</code>:</strong> arbitrary font size (number ― see Tailwind configuration). When used with <code>lineHeight</code>, the <code>font</code> value will be ignored.</li><li><strong><code>lineHeight</code>:</strong> line height (number ― see Tailwind configuration). When used with <code>size</code>, the <code>font</code> value will be ignored.</li><li><strong><code>weight</code>:</strong> font weight from the <code>FontWeightsEnum</code> collection (from 100 to 900 in increments of 100 units). Default value is <code>FontWeightsEnum.400</code>.</li><li><strong><code>color</code>:</strong> text color (string). Can specify a class name (e.g., <code>text_secondary</code>) or a custom color value (<code>#FF0000</code>).</li></ul><p>The component dynamically generates CSS classes based on the input properties, applying them to the host element. This allows controlling the text style throughout the project.</p><p>To use the component, add the <code>&lt;app-text&gt;</code> tag to required component's HTML template and specify the necessary input properties.</p>",
      "headings": "Headings",
      "text": "Text",
      "defaultText": "The quick brown fox jumps over a lazy dog.",
      "exampleText": "Example text"
    },
    "colors": {
      "title": "Colors",
      "description": "<p>During development, the <strong>Tailwind CSS</strong> framework is actively used. Our project is complemented with custom colors in the <code>tailwind.config.ts</code> file under the <code>themes</code> section, which are then defined in the <code>/styles/tailwind.scss</code> file (under the <code>@layer base</code> section). This not only extends Tailwind's capabilities but also provides a unique color palette specific to our design needs. Such an approach not only increases the manageability of styles but also ensures consistency in the color scheme throughout the application. In the <code>theme</code> section, color values are defined using custom properties, such as <code>--background_primary</code>, <code>--text_primary</code>, etc., providing a centralized way to manage and update the color palette.</p><p>Below are all the custom colors used in our application.</p>",
      "background": "Background",
      "text": "Text",
      "border": "Border",
      "colors": "Colors",
      "cssClass": "CSS-class"
    },
    "icons": {
      "title": "Icons",
      "description": "<p><strong>IconComponent</strong> ― a universal Angular component designed to display icons with various styling options (icon name, size, color, etc.). This component and the <code>IconsEnum</code> collection should be used for universal icon display in the project. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>icon</code>:</strong> accepts the name of the used icon (preferably using names from the <code>IconsEnum</code> collection).</li><li><strong><code>size</code>:</strong> icon size from the <code>IconSizesEnum</code> collection. Default value is <code>IconSizesEnum.Medium</code> (24px ― see Tailwind configuration).</li><li><strong><code>color</code>:</strong> icon color (string). Default is <code>text_primary</code> color (see Tailwind configuration).</li><li><strong><code>cssClass</code>:</strong> CSS classes (string) for additional icon styling.</li><li><strong><code>isFilled</code>:</strong> indicator for filling the icon with color. Default is <code>false</code> (color is applied to the icon outlines). If set to <code>true</code>, the icon will be filled instead of outlined.</li><li><strong><code>iconClick</code>:</strong> click event handler for the icon.</li></ul><p>To use the component, add the <code>&lt;app-icon&gt;</code> tag to required component's HTML template and specify the necessary input properties and output handlers.</p>",
      "nothingFound": {
        "title": "Nothing found",
        "description": "In our collection, there is no icon with the name"
      },
      "searchByTitle": "Search by title"
    },
    "buttons": {
      "title": "Buttons",
      "description": "<p>The <strong>ButtonComponent</strong> is a reusable <strong>Angular Material</strong> button component that allows you to customize various options such as button size and type, presence of icons on the right or left of the button label, control state (active or disabled), etc. This component should be used for universal button display in the project. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>cssClass</code></strong>: CSS classes (string) for additional button styling.</li><li><strong><code>isLoading</code></strong>: loading state indicator on the button in the form of a spinner, which is displayed if the value is set to <code>true</code>.</li><li><strong><code>isDisabled</code></strong>: button state indicator ― disabled when the value is set to <code>true</code>, and vice versa.</li><li><strong><code>disableRipple</code></strong>: ripple effect when clicked (Angular Material). Default is <code>true</code>.</li><li><strong><code>leftIcon</code></strong>: icon positioned to the left of the button text (collection <code>IconsEnum</code>).</li><li><strong><code>rightIcon</code></strong>: icon positioned to the right of the button text (collection <code>IconsEnum</code>).</li><li><strong><code>label</code></strong>: button label (string).</li><li><strong><code>size</code></strong>: button size (collection <code>ControlSizesEnum</code>). Default is <code>ControlSizesEnum.Small</code>.</li><li><strong><code>type</code></strong>: button type (collection <code>ButtonTypesEnum</code>). Default is <code>ButtonTypesEnum.Primary</code>.</li><li><strong><code>buttonClick</code></strong>: handler for button click event.</li><li><strong><code>buttonFocus</code></strong>: handler for button focus event.</li></ul><p>To use the component, insert the <code>&lt;app-button&gt;</code> tag into the HTML template of the required component and specify the necessary properties and handlers.</p>"
    },
    "inputs": {
      "title": "Inputs",
      "description": "<p><strong>InputComponent</strong> is a versatile reusable component inheriting input behavior from <strong>Angular Material</strong> and designed to manage input elements in forms with extensive customization options (size, presence of a label, input type, reset button, etc.). This component also inherits from the <code>ControlDirective</code> directive for efficient control management. This component should be used for universal display of inputs in the project. Below are all possible use cases of the component.</p>",
      "settings": "<ul><li><strong><code>max</code></strong>: maximum value (number), used if the input type is <code>InputTypesEnum.Number</code>.</li><li><strong><code>min</code></strong>: minimum value (number), used if the input type is <code>InputTypesEnum.Number</code>.</li><li><strong><code>mask</code></strong>: input mask (string), used if the input type is <code>InputTypesEnum.Text</code>.</li><li><strong><code>step</code></strong>: input step (number), used if the input type is <code>InputTypesEnum.Number</code>.</li><li><strong><code>showLabel</code></strong>: indicator for displaying a label for the input. Default is <code>true</code>.</li><li><strong><code>inputClass</code></strong>: CSS classes (string) for additional button styling.</li><li><strong><code>isAutoWidth</code></strong>: indicator for using input width based on content. Default is <code>false</code>.</li><li><strong><code>leftIcon</code></strong>: icon located to the left of the input area inside the input (collection <code>IconsEnum</code>).</li><li><strong><code>rightIcon</code></strong>: icon located to the right of the input area inside the input (collection <code>IconsEnum</code>).</li><li><strong><code>isResetEnabled</code></strong>: indicator for displaying a reset value icon. Default is <code>false</code>.</li><li><strong><code>initValidation</code></strong>: indicator for input validation before entering values. Default is <code>false</code>.</li><li><strong><code>showValidationsError</code></strong>: indicator for displaying validation errors. Default is <code>true</code>.</li><li><strong><code>showValidationIcons</code></strong>: indicator for displaying validation icons. Default is <code>false</code>.</li><li><strong><code>showVisualValidation</code></strong>: indicator for displaying visual validation (green for successful validation and red for unsuccessful). Default is <code>false</code>.</li><li><strong><code>isFullwidth</code></strong>: indicator for applying input width to 100%. Default is <code>false</code>.</li><li><strong><code>type</code></strong>: input type (collection <code>InputTypesEnum</code>). Default value is <code>InputTypesEnum.Text</code>.</li><li><strong><code>size</code></strong>: input size (collection <code>ControlSizesEnum</code>). Default value is <code>ControlSizesEnum.Sm</code> (width - 200px).</li><li><strong><code>blur</code></strong>: handler for input blur event.</li><li><strong><code>focus</code></strong>: handler for input focus event.</li><li><strong><code>valueChanged</code></strong>: handler for input value change event.</li><li><strong><code>keyboardEvent</code></strong>: handler for input keyboard events.</li></ul><p>To use the component, add the <code>&lt;app-input&gt;</code> tag to the HTML template of the desired component and specify the necessary properties and handlers.</p>"
    },
    "dropdowns": {
      "title": "Dropdowns",
      "description": "<p><strong>DropdownComponent</strong> is a versatile reusable component that inherits dropdown behavior from <strong>Angular Material</strong> and is designed to manage select inputs with options in forms with extensive configuration options (size, label presence, input type, reset button, etc.). This component also inherits from the <code>ControlDirective</code> directive for efficient control management. This component should be used for universal display of dropdowns in the project. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>multiple</code></strong>: indicator for multiple option selection. Default is <code>true</code>.</li><li><strong><code>showLabel</code></strong>: indicator for displaying a label for the dropdown. Default is <code>true</code>.</li><li><strong><code>leftIcon</code></strong>: icon positioned to the left of the dropdown value (collection <code>IconsEnum</code>).</li><li><strong><code>isAutoWidth</code></strong>: indicator for using input width based on content. Default is <code>false</code>.</li><li><strong><code>initValidation</code></strong>: indicator for dropdown validation before entering values. Default is <code>false</code>.</li><li><strong><code>isResetEnabled</code></strong>: indicator for displaying a value reset icon. Default is <code>false</code>.</li><li><strong><code>isDividedOptions</code></strong>: indicator for using separators in the options list. Default is <code>false</code>.</li><li><strong><code>panelClasses</code></strong>: CSS classes for additional styling of the options panel.</li><li><strong><code>showValidationsError</code></strong>: indicator for displaying validation errors. Default is <code>true</code>.</li><li><strong><code>showValidationIcons</code></strong>: indicator for displaying validation icons. Default is <code>false</code>.</li><li><strong><code>showVisualValidation</code></strong>: indicator for displaying visual validation (green for successful validation and red for unsuccessful). Default is <code>false</code>.</li><li><strong><code>isFullwidth</code></strong>: indicator for applying full width to the dropdown. Default is <code>false</code>.</li><li><strong><code>size</code>: </strong>input size (collection <code>ControlSizesEnum</code>). Default value is <code>ControlSizesEnum.Sm</code> (width - 200px).</li><li><strong><code>blur</code></strong>: handler for dropdown blur event.</li><li><strong><code>focus</code></strong>: handler for dropdown focus event.</li><li><strong><code>valueChanged</code></strong>: handler for dropdown value change event.</li></ul><p>To use the component, add the <code>&lt;app-dropdown&gt;</code> tag to the HTML template of the required component and specify the necessary properties and handlers.</p>"
    },
    "checkboxes": {
      "title": "Checkboxes",
      "description": "<p><strong>CheckboxComponent</strong> is a versatile reusable component that inherits checkbox behavior from <strong>Angular Material</strong> and is designed to manage multiple-choice elements with extensive configuration options (size, presence of description, expander mode, etc.). This component also inherits from the <code>ControlDirective</code> directive for efficient control management. This component should be used for universal display of checkboxes in the project. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: indicator of the selected checkbox state. Default is <code>false</code>.</li><li><strong><code>isRounded</code></strong>: indicator for rounded checkbox style. Default is <code>false</code>.</li><li><strong><code>label</code></strong>: checkbox label (string).</li><li><strong><code>disableRipple</code></strong>: ripple effect on click (Angular Material). Default is <code>true</code>.</li><li><strong><code>isExpandMode</code></strong>: indicator for checkbox expander mode. Default is <code>false</code>.</li><li><strong><code>description</code></strong>: checkbox description (string).</li><li><strong><code>size</code></strong>: checkbox size (collection <code>ControlSizesEnum</code>). Default value is <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: handler for checkbox value change event.</li></ul><p>To use the component, add the <code>&lt;app-checkbox&gt;</code> tag to the HTML template of the required component and specify the necessary properties and handlers.</p>"
    },
    "radioButtons": {
      "title": "Radio-buttons",
      "description": "<p><strong>RadioButtonComponent</strong> is a versatile reusable component inheriting radio button behavior from <strong>Angular Material</strong> and designed to manage single-choice elements with extensive configuration options (size, presence of description, etc.). To universally display radio buttons in the project, this component should be used. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: indicator of the selected radio button state. Default is <code>false</code>.</li><li><strong><code>label</code></strong>: radio button label (string).</li><li><strong><code>isRequired</code></strong>: indicator of the radio button state (required / not required).</li><li><strong><code>isTestMode</code></strong>: testing mode indicator (in this mode, the control can be pressed even when disabled). Default is <code>false</code>.</li><li><strong><code>disableRipple</code></strong>: ripple effect on click (Angular Material). Default is <code>true</code>.</li><li><strong><code>description</code></strong>: radio button description (string).</li><li><strong><code>control</code>:</strong> radio button control (<code>UntypedFormControl</code>).</li><li><strong><code>size</code>: </strong>radio button size (collection <code>ControlSizesEnum</code>). Default value is <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: handler for radio button value change event.</li></ul><p>To use the component, add the <code>&lt;app-radio-button&gt;</code> tag to the HTML template of the required component and specify the necessary properties and handlers.</p>"
    },
    "switchers": {
      "title": "Switchers",
      "description": "<p><strong>SwitcherComponent</strong> is a versatile reusable component inheriting switch behavior from <strong>Angular Material</strong> and designed to manage single-choice elements with extensive configuration options (size, presence of description, etc.). This component also inherits from the <code>ControlDirective</code> directive for efficient control management. To universally display switchers in the project, this component should be used. Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>checked</code></strong>: indicator of the selected switcher state. Default is <code>false</code>.</li><li><strong><code>label</code></strong>: switcher label (string).</li><li><strong><code>disableRipple</code></strong>: ripple effect on click (Angular Material). Default is <code>true</code>.</li><li><strong><code>isAccentGrey</code></strong>: indicator of accent gray color for the switcher. Default is <code>false</code>.</li><li><strong><code>description</code></strong>: switcher description (string).</li><li><strong><code>size</code>: </strong>switcher size (collection <code>ControlSizesEnum</code>). Default value is <code>ControlSizesEnum.Sm</code>.</li><li><strong><code>сhange</code></strong>: handler for switcher value change event.</li></ul><p>To use the component, add the <code>&lt;app-switcher&gt;</code> tag to the HTML template of the required component and specify the necessary properties and handlers.</p>"
    },
    "avatars": {
      "title": "Avatars",
      "description": "<p><strong>AvatarComponent</strong> is a versatile reusable Angular component designed to display user avatars with customization options (image source, size, and presence of a border around the avatar). Below are all possible ways to use the component.</p>",
      "settings": "<ul><li><strong><code>src</code></strong>: image source. If the image fails to load, a default placeholder image is used ― 'user-01.svg'.</li><li><strong><code>size</code></strong>: avatar size (collection <code>AvatarSizesEnum</code>). Default value is <code>AvatarSizesEnum.s32</code> (width and height ― 32px).</li><li><strong><code>hasBorder</code></strong>: indicator of whether there is a border around the avatar. Default is <code>false</code>.</li></ul><p>To use the component, add the <code>&lt;app-avatar&gt;</code> tag to the HTML template of the required component and specify the necessary properties.</p>"
    },
    "dividers": {
      "title": "Dividers",
      "description": "<p>Custom dividers are built on the basis of <strong>Tailwind CSS</strong> classes <code>divide-y</code>, <code>divide-x</code>, combined with <code>border-border_primary</code>.</p><p>Below are all the usage options for dividers used in our application.</p>"
    }
  }
}